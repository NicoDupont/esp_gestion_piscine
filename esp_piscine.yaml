substitutions:
  friendly_name: "Esp Jardin Piscine"
  friendly_name_wifiap: "Esp-Piscine-Hotspot"
  interval_update_court: "5s"
  interval_update_normal: "60s"
  interval_update_long: "600s"
esphome:
  name: esp-jardin-piscine
  friendly_name: esp-jardin-piscine
  comment: esp32u gestion filtration piscine + monitoring T°c, ph, circulation, W/kwh
esp32:
  board: esp32dev
  framework:
    type: arduino
wifi:
  networks:
  - ssid: !secret wifi_maison_ssid
    password: !secret wifi_maison_password
  - ssid: !secret wifi_maison_2_ssid
    password: !secret wifi_maison_2_password
  reboot_timeout : 2min #reboot si pas de wifi actif
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name_wifiap}"
    password: !secret wifi_esp_ap_password
# Enable Home Assistant API
logger:
api:
#  encryption:
#    key: "/cwwnz/W/vY7ACFed70IgB2ejL3m0WsYimZrtHsk/18="
ota:
  password: "c83e8e9b5b943a746113059f30987dd1"
captive_portal:
#--------------------------------------
esp32_ble_tracker:
bluetooth_proxy:
#--------------------------------------
web_server:
  port: 80
  version: 2

#--------------------------------------
#--------------------------------------
# ds18b20 temperature eau + ext
dallas:
  - update_interval : ${interval_update_normal}
    pin: 19
    id: dallas_a

#--------------------------------------
#--------------------------------------
#i2c ads1115 + pcf8575 + bme280 
i2c:
  - id: bus_a
    sda: 21
    scl: 22
    scan: True
  
  - id: bus_b
    sda: 26
    scl: 27
    scan: True

#--------------------------------------
#--------------------------------------
#i2c pcf8575 i/o extender 16 gpio 
pcf8574:
  - id: 'pcf8575_hub'
    address: 0x20 #ou 0x21
    pcf8575: True
    i2c_id: bus_a

#--------------------------------------
#--------------------------------------
#i2c ads1115 pour lire le capteurs de pression 30psi du filtre 0.5=>4.5v + lecture PH
ads1115:
  - address: 0x48
    i2c_id: bus_a

#--------------------------------------
#--------------------------------------
time:
  - platform: homeassistant
    timezone: "Europe/Paris"
    id: ha_time

#  - platform: sntp
#    on_time:
#    # toutes les 10 minutes
#      - seconds: 0
#        minutes: /10
#        then:
#          - if:
#              condition:
#                and:
#                  - switch.is_on: EspJardinPiscinePompeFiltration
#                  - binary_sensor.is_off: EspJardinPiscineDebitEau
#                  - switch.is_on: EspJardinPiscineSecuriteDebitEau
#              then:
#                - switch.turn_off: EspJardinPiscinePompeFiltration


#uart pour pzem004v3
uart:
  rx_pin: 16
  tx_pin: 17
  baud_rate: 9600
modbus:

#----------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------
# ecran led de controle 3.3v
font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 14

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    i2c_id: bus_b
    address: 0x3C
    #it.printf(0,20,id(roboto), "pH : %.2f ", id(EspJardinPiscinePh).state);
    lambda: |-
      it.printf(0,0,id(roboto), "pH : %.2f V", id(EspJardinPiscineA1Voltage).state);
      it.printf(0,15,id(roboto), "T°c Eau : %.1f",id(EspJardinPiscineTempEauPiscine).state);
      it.printf(0,30,id(roboto), "Pression : %.2f B",id(EspJardinPiscinePressionFiltreSable).state);
      it.printf(0,45,id(roboto), "Debit - %s", id(EspJardinPiscineDebitEau).state ? "OUI" : "NON");

#----------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------
#binary_sensor
binary_sensor:

#porte de devant du local
  - platform: gpio
    pin:
      number: 13
      inverted: False
    name: "${friendly_name} Flotteur Niveau Haut Status"
    id: EspJardinPiscineFlotteurNiveauHautStatus
    device_class: opening

#vanne remplissage fermee
  - platform: gpio
    pin:
      number: 25
      inverted: False
    name: "${friendly_name} Porte Avant Status"
    id: EspJardinPiscinePorteAvantStatus
    device_class: opening

#hayon/porte du local
  - platform: gpio
    pin:
      number: 14
      inverted: False
    name: "${friendly_name} Hayon Status"
    id: EspJardinPiscineHayonStatus
    device_class: opening

#debit eau
  - platform: gpio
    pin:
      number: 32
      inverted: False
    name: "${friendly_name} Detecteur Debit Eau"
    id: EspJardinPiscineDebitEau
    device_class: opening
    icon: mdi:hydro-power
    on_state:
      then:
        if:
          condition:
            and:
            - switch.is_on: EspJardinPiscinePompeFiltration
            - binary_sensor.is_off: EspJardinPiscineDebitEau
            - switch.is_on: EspJardinPiscineSecuriteDebitEau
          then:
            - switch.turn_off:
                id: EspJardinPiscinePompeFiltration 
            - light.turn_off: EspJardinPiscineStatusLed2
          else:
            if:
              condition:
                - binary_sensor.is_on: EspJardinPiscineDebitEau
              then:
                - light.turn_on: EspJardinPiscineStatusLed2 
              else:
                - light.turn_off: EspJardinPiscineStatusLed2


# DIAGNOSTIQUE
#--------------------------------------
#boolean status of the esp32
  - platform: status
    name: "${friendly_name} Status"
    id : EspJardinPiscineStatus

text_sensor:
  - platform: template
    name: "${friendly_name} Uptime"
    id: uptime_human
    icon: mdi:clock-start 
#--------------------------------------
#wifi   
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} Local IP"
      id : EspJardinPiscineLocalIp
    ssid:
      name: "${friendly_name} SSID"
      id : EspJardinPiscineSSID

#----------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------
#bouton
button:
  - platform: restart
    name: "${friendly_name} Restart"
    id : EspJardinPiscineRestart
  - platform: shutdown
    name: "${friendly_name} Shutdown"
    id : EspJardinPiscineShutdown
  - platform: safe_mode
    name: "${friendly_name} Safe Mode"
    id : EspJardinPiscineSafeMode

#----------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------
#sensor
sensor:
#--------------------------------------
#esp32 temp
  - platform: internal_temperature
    name: "${friendly_name} Internal Esp32 Temp"
    id: EspVsArrosageInternalEsp32Temp
    update_interval: ${interval_update_normal}

#PZEM POMPE FILTRATION
  - platform: pzemac
    current:
      name: ${friendly_name} Pump Current"
      id: EspJardinPiscinePumpCurrent
    voltage:
      name: "${friendly_name} Voltage"
      id: EspJardinPiscineVoltage
    energy:
      name: "${friendly_name} Pump Energy"
      id: EspJardinPiscinePumpEnergy
    power:
      name: "${friendly_name} Pump Power"
      id: EspJardinPiscinePumpPower
    frequency:
      name: "${friendly_name} Frequency"
      id: EspJardinPiscineFrequency
    power_factor:
      name: "${friendly_name} Pump Power Factor"
      id: EspJardinPiscinePumpFactor
    address: 1
    update_interval: ${interval_update_normal}

#BME280
#monitoring de la temperature de la box avec l'electronique / alim / relais
  - platform: bme280
    temperature:
      name: "${friendly_name} Temperature Box"
      id: EspJardinPiscineTempBox
      oversampling: 16x
      accuracy_decimals: 1
    pressure:
      name: "${friendly_name} Pression Atmo Box"
      id: EspJardinPiscinePressionAtmoBox
      oversampling: 16x
      accuracy_decimals: 1
    humidity:
      name: "${friendly_name} Humidity Box"
      id: EspJardinPiscineHumiBox
      accuracy_decimals: 1
      oversampling: 16x
    address: 0x76 #or 0x76/0x77 0x76 = defaut
    i2c_id: bus_a
    update_interval: ${interval_update_normal}

# MLX90614 mesure temperature local + surface pompe
#  - platform: mlx90614
#    i2c_id: bus_b
#    ambient:
#      name: "${friendly_name} Temperature Local Filtration"
#      id: EspJardinPiscineTempLocalFiltration
#      accuracy_decimals: 1
#    object:
#      name: "${friendly_name} Temperature Surface Pompe"
#      id: EspJardinPiscineTempSurfacePompe
#      accuracy_decimals: 1

#DALLAS
#eau piscine + ext
  - platform: dallas
    address: 0xbb02099245f2e828
    accuracy_decimals: 1
    name: "${friendly_name} Temperature Eau Piscine"
    id: EspJardinPiscineTempEauPiscine
    
  - platform: dallas
    address: 0x0402099245fd8628
    accuracy_decimals: 1
    name: "${friendly_name} Temperature Extérieur"
    id: EspJardinPiscineTempExterieur
  
  - platform: dallas
    address: 0x1a020792458cee28
    accuracy_decimals: 1
    name: "${friendly_name} Temperature Local Filtration"
    id: EspJardinPiscineTempLocalFiltration

# ADS1115 PRESSION FILTRE + PH
# gain : 6.144 pour la plage de tension (attention au vcc => voir doc ads1115) 

  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 6.144 
    name: "${friendly_name} A0 Voltage"
    id: EspJardinPiscineA0Voltage
    device_class: voltage
    unit_of_measurement: V
    state_class: "measurement"
    update_interval: ${interval_update_court}

  - platform: ads1115
    multiplexer: 'A1_GND'
    gain: 6.144 
    name: "${friendly_name} A1 Voltage"
    id: EspJardinPiscineA1Voltage
    device_class: voltage
    unit_of_measurement: V
    state_class: "measurement"
    update_interval: ${interval_update_court}

  # pression filtre à sable  0=>30psi = 0=>2bar
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 6.144 
    name: "${friendly_name} Pression Filtre Sable"
    id: "EspJardinPiscinePressionFiltreSable"
    device_class: pressure
    state_class: "measurement"
    icon: "mdi:gauge"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
            - 0.5 -> 0 
            - 4.5 -> 2.06843
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1
      - lambda: if (x>2.06843) { return 2.06843; } else {if (x<0) {return 0;} else {return x;} }
    unit_of_measurement: bar
    update_interval: ${interval_update_court}   

  # mesure du PH
  - platform: ads1115
    multiplexer: 'A1_GND'
    gain: 6.144 
    name: "${friendly_name} Ph"
    id: "EspJardinPiscinePh"
    unit_of_measurement: "pH"
    state_class: "measurement"
    icon: "mdi:ph"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
            - 0.5 -> 0 
            - 5 -> 12
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1
      - lambda: if (x>12) { return 12; } else {if (x<0) {return 0;} else {return x;} }
    update_interval: ${interval_update_normal}   

# DIAGNOSTIQUE
#--------------------------------------
#wifi
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    id: EspJardinPiscineWifiSignal
    update_interval: ${interval_update_long}

#--------------------------------------
#Uptime decomposé       
  - platform: uptime
    name: "${friendly_name} Uptime Sensor"
    id: EspJardinPiscineUptimeSensor
    update_interval: ${interval_update_long}
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(EspJardinPiscineUptimeSensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "")
              ).c_str();


#--------------------------------------
#--------------------------------------
# GESTION RELAIS
switch:

#--------------------------------------
# RELAIS CONTROLE DU CONTACTEUR DE LA POMPE FILTRATION
- platform: gpio
  pin:
    pcf8574: pcf8575_hub
    number: 0
    mode:
      output: true
    inverted: true
  icon: mdi:water-pump
  id: EspJardinPiscinePompeFiltration
  name: "${friendly_name} Pompe Filtration"
  on_turn_on:
    then:
      - light.turn_on: EspJardinPiscineStatusLed1
  on_turn_off:
    then:
      - light.turn_off: EspJardinPiscineStatusLed1

- platform: template
  name: "${friendly_name} Securite Debit Eau"
  id: EspJardinPiscineSecuriteDebitEau
  restore_mode: 'ALWAYS_ON'
  optimistic: true
  icon: mdi:water-alert-outline
  #arrete pompe filtration si pas de debit et activation de la securité
  on_turn_on:
    then:
      - if:
          condition:
            and:
            - switch.is_on: EspJardinPiscinePompeFiltration
            - binary_sensor.is_off: EspJardinPiscineDebitEau
          then:
            - switch.turn_off: EspJardinPiscinePompeFiltration

#--------------------------------------

#--------------------------------------
# LED DE CONTROLE VISUEL
light:
  - platform: binary
    name: "${friendly_name} Pompe Filtration Status Led"
    id: EspJardinPiscineStatusLed1
    output: led1
    
  - platform: binary
    name: "${friendly_name} Debit Eau Status Led"
    id: EspJardinPiscineStatusLed2
    output: led2

# reserve led de status
  - platform: binary
    name: "${friendly_name} Status Led 3"
    id: EspJardinPiscineStatusLed3
    output: led3

  - platform: binary
    name: "${friendly_name} Status Led 4"
    id: EspJardinPiscineStatusLed4
    output: led4

output:
  - id: led1
    platform: gpio
    pin:
      pcf8574: pcf8575_hub
      number: 15
      inverted: True
  
  - id: led2 #blue led
    platform: gpio
    pin:
      pcf8574: pcf8575_hub
      number: 14
      inverted: True

  - id: led3
    platform: gpio
    pin:
      pcf8574: pcf8575_hub
      number: 13
      inverted: True

  - id: led4
    platform: gpio
    pin:
      pcf8574: pcf8575_hub
      number: 12
      inverted: True
